@using DiagnosticoWeb.Code
@{
    ViewData["Title"] = "Estad√≠sticas generales";
}
@using System.Security.Claims;



<!-- Bootstrap CSS -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">

<!-- Font Awesome -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">

<!-- Bootstrap Select -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-select@1.14.0-beta3/dist/css/bootstrap-select.min.css">

<style>
    :root {
        --primary-blue: #0055A4;
        --secondary-blue: #0072BC;
        --accent-gold: #C9A87A;
        --accent-green: #2E8B57;
        --light-gray: #F5F7FA;
        --dark-gray: #34495E;
        --white: #FFFFFF;
        --text-dark: #2C3E50;
        --text-light: #7F8C8D;
        --border-color: #E0E6ED;
        --oranger-color: #FF4500;
        --card-shadow: 0 8px 24px rgba(0, 85, 164, 0.12);
        --header-height: 70px;
        --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
    }

    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background: linear-gradient(135deg, #f5f7fa 0%, #e4e8f0 100%);
        color: var(--text-dark);
        line-height: 1.6;
        min-height: 100vh;
    }

    .app-container {
        max-width: 1800px;
        margin: 0 auto;
        padding: 2rem;
        margin-bottom: 100px;
    }

    /* Header Section */
    .header-section {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
        padding: 1.5rem;
        background: var(--white);
        border-radius: 16px;
        box-shadow: var(--card-shadow);
    }

    .section-title {
        font-size: 1.8rem;
        font-weight: 700;
        color: var(--primary-blue);
        margin: 0;
        position: relative;
        display: inline-block;
    }

        .section-title::after {
            content: '';
            position: absolute;
            bottom: -8px;
            left: 0;
            width: 50px;
            height: 4px;
            background: linear-gradient(90deg, var(--primary-blue), var(--secondary-blue));
            border-radius: 2px;
        }

    /* Card Styles */
    .card {
        border: none;
        border-radius: 16px;
        box-shadow: var(--card-shadow);
        transition: var(--transition);
        margin-bottom: 1.5rem;
        background-color: white;
    }

        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        }

    .card-header {
        background: transparent;
        border-bottom: 1px solid #e2e8f0;
        padding: 1.25rem 1.5rem;
        font-weight: 600;
        color: var(--dark);
    }

    .card-body {
        padding: 1.5rem;
    }

    /* Stats Grid */
    .stats-grid {
        display: grid;
        grid-template-columns: repeat(6, minmax(150px, 1fr));
        gap: 1.25rem;
        margin-bottom: 1.5rem;
    }

    .stat-card {
        background: white;
        border-radius: 12px;
        padding: 1.5rem;
        text-align: center;
        box-shadow: var(--card-shadow);
        transition: var(--transition);
        border-left: 4px solid var(--primary);
    }

        .stat-card:hover {
            transform: translateY(-3px);
        }

        .stat-card.completed {
            border-left-color: var(--success);
        }

        .stat-card.incompleted {
            border-left-color: var(--danger);
        }

        .stat-card.efficiency {
            border-left-color: var(--warning);
        }

        .stat-card.average {
            border-left-color: #ff0080;
        }

        .stat-card.surveys {
            border-left-color: var(--oranger-color);
        }


    .stat-icon {
        font-size: 2.5rem;
        margin-bottom: 1rem;
        color: var(--primary);
    }

    .stat-card.completed .stat-icon {
        color: var(--success);
    }

    .stat-card.incompleted .stat-icon {
        color: var(--danger);
    }

    .stat-card.efficiency .stat-icon {
        color: var(--warning);
    }

    .stat-card.average .stat-icon {
        color: #ff0080;
    }

    .stat-card.surveys .stat-icon {
        color: var(--oranger-color);
    }

    .stat-number {
        font-size: 2rem;
        font-weight: 700;
        margin-bottom: 0.5rem;
    }

    .stat-card.completed .stat-number {
        color: var(--success);
    }

    .stat-card.incompleted .stat-number {
        color: var(--danger);
    }

    .stat-card.efficiency .stat-number {
        color: var(--warning);
    }

    .stat-card.average .stat-number {
        color: #ff0080;
    }

    .stat-card.surveys .stat-number {
        color: var(--oranger-color);
    }

    .stat-label {
        color: var(--secondary);
        font-size: 0.9rem;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        font-weight: 600;
    }

    /* Cards */
    .card {
        border: none;
        border-radius: 16px;
        box-shadow: var(--card-shadow);
        transition: var(--transition);
        margin-bottom: 1.5rem;
        overflow: hidden;
        background: var(--white);
    }

        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 12px 30px rgba(0, 85, 164, 0.18);
        }

    .card-header {
        background: linear-gradient(135deg, var(--primary-blue), var(--secondary-blue));
        color: white;
        font-weight: 600;
        padding: 1.25rem 1.5rem;
        border-bottom: none;
        border-radius: 16px 16px 0 0 !important;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .card-body {
        padding: 1.5rem;
    }

    /* Filters */
    .filter-label {
        font-weight: 600;
        margin-bottom: 0.5rem;
        color: var(--dark-gray);
        font-size: 0.9rem;
    }

    .form-control, .form-select {
        border-radius: 10px;
        padding: 0.75rem 1rem;
        border: 1px solid var(--border-color);
        transition: var(--transition);
        font-size: 0.95rem;
    }

        .form-control:focus, .form-select:focus {
            border-color: var(--secondary-blue);
            box-shadow: 0 0 0 0.25rem rgba(0, 114, 188, 0.15);
        }

    /* Buttons */
    .btn {
        border-radius: 10px;
        padding: 0.75rem 1.5rem;
        font-weight: 600;
        transition: var(--transition);
        border: none;
    }

    .btn-primary {
        background: linear-gradient(135deg, var(--primary-blue), var(--secondary-blue));
        box-shadow: 0 4px 12px rgba(0, 114, 188, 0.25);
    }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 16px rgba(0, 114, 188, 0.35);
            background: linear-gradient(135deg, var(--secondary-blue), var(--primary-blue));
        }

    .btn-outline-secondary {
        border: 1px solid var(--border-color);
        color: var(--text-light);
        background-color: white;
    }

        .btn-outline-secondary:hover {
            background-color: var(--light-gray);
            border-color: var(--secondary-blue);
            color: var(--secondary-blue);
        }

    .btn-success {
        background: linear-gradient(135deg, var(--accent-green), #34a86f);
        box-shadow: 0 4px 12px rgba(46, 139, 87, 0.25);
    }

        .btn-success:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 16px rgba(46, 139, 87, 0.35);
            background: linear-gradient(135deg, #34a86f, var(--accent-green));
        }

    /* Stats Grid */
    .stats-grid {
        display: grid;
        grid-template-columns: repeat(6, minmax(150px, 1fr));
        gap: 1.25rem;
    }

    .stat-card {
        text-align: center;
        padding: 1.5rem 1rem;
        border-radius: 12px;
        background: var(--white);
        transition: var(--transition);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
    }

        .stat-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
        }

    .stat-icon {
        font-size: 2.5rem;
        margin-bottom: 1rem;
        color: var(--secondary-blue);
        transition: var(--transition);
    }

    .stat-card:hover .stat-icon {
        transform: scale(1.1);
        color: var(--primary-blue);
    }

    .stat-number {
        font-size: 2rem;
        font-weight: 700;
        margin: 0.5rem 0;
        background: linear-gradient(135deg, var(--primary-blue), var(--secondary-blue));
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }

    .stat-label {
        color: var(--text-light);
        font-size: 0.85rem;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        font-weight: 600;
    }

    /* Charts */
    .chart-container {
        height: 400px;
        width: 100%;
        border-radius: 12px;
        background: var(--white);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
    }

    .large-chart {
        height: 450px !important;
    }

    /* Leaderboard */
    .leaderboard-card {
        background: var(--white);
        border-left: 4px solid var(--secondary-blue);
        max-height: 500px;
        overflow-y: auto;
    }

    .leader-item {
        padding: 1rem;
        border-bottom: 1px solid var(--border-color);
        transition: var(--transition);
        display: flex;
        align-items: center;
    }

        .leader-item:hover {
            background-color: rgba(0, 114, 188, 0.05);
            transform: translateX(5px);
        }

    .leader-rank {
        width: 36px;
        height: 36px;
        border-radius: 50%;
        background: linear-gradient(135deg, var(--primary-blue), var(--secondary-blue));
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: 700;
        font-size: 1rem;
        margin-right: 1rem;
        flex-shrink: 0;
    }

    .rank-1 {
        background: linear-gradient(135deg, #FFD700, #FFC400);
    }

    .rank-2 {
        background: linear-gradient(135deg, #C0C0C0, #A0A0A0);
    }

    .rank-3 {
        background: linear-gradient(135deg, #CD7F32, #B87333);
    }

    .rank-last {
        background: linear-gradient(135deg, #FF6B6B, #EE5A52);
    }

    .leader-name {
        font-weight: 600;
        color: var(--dark-gray);
        font-size: 0.95rem;
        margin-bottom: 0.25rem;
    }

    .leader-stats {
        font-size: 0.8rem;
        color: var(--text-light);
    }

    .progress {
        height: 8px;
        border-radius: 4px;
        background-color: var(--border-color);
        overflow: hidden;
        margin-top: 0.5rem;
    }

    .progress-bar {
        background: linear-gradient(90deg, var(--secondary-blue), var(--primary-blue));
        transition: width 1s ease-in-out;
    }

    .stats-badge {
        background: linear-gradient(135deg, var(--primary-blue), var(--secondary-blue));
        color: white;
        padding: 0.35rem 0.75rem;
        border-radius: 12px;
        font-weight: 600;
        font-size: 0.75rem;
        margin-left: 0.5rem;
    }

    /* Summary */
    .stats-summary {
        background: linear-gradient(135deg, #f8f9fa, #e9ecef);
        padding: 1.25rem;
        border-radius: 12px;
        text-align: center;
        transition: var(--transition);
    }

        .stats-summary:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 16px rgba(0, 0, 0, 0.08);
        }

    .stats-summary-number {
        font-size: 1.75rem;
        font-weight: 700;
        margin-bottom: 0.5rem;
    }

    .stats-summary-label {
        font-size: 0.8rem;
        color: var(--text-light);
        text-transform: uppercase;
        letter-spacing: 0.5px;
        font-weight: 600;
    }

    .summary-title {
        font-size: 1.1rem;
        font-weight: 600;
        color: var(--primary-blue);
        margin-bottom: 1.25rem;
        text-align: center;
        border-bottom: 2px solid var(--secondary-blue);
        padding-bottom: 0.75rem;
    }

    /* Activity Section */
    .activity-card {
        background: var(--white);
        border-left: 4px solid var(--accent-green);
    }

    .activity-item {
        display: flex;
        justify-content: space-between;
        padding: 0.75rem 1rem;
        border-bottom: 1px solid var(--border-color);
    }

        .activity-item:last-child {
            border-bottom: none;
        }

    .activity-day {
        font-weight: 600;
        color: var(--dark-gray);
    }

    .activity-count {
        color: var(--primary-blue);
        font-weight: 700;
    }

    /* Loading */
    .loading-overlay {
        display: flex;
        justify-content: center;
        align-items: center;
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(255, 255, 255, 0.9);
        z-index: 1000;
        border-radius: 16px;
    }

    /* Utilities */
    .text-muted {
        color: var(--text-light) !important;
    }

    .text-primary {
        color: var(--primary-blue) !important;
    }

    .text-success {
        color: var(--accent-green) !important;
    }

    .text-info {
        color: var(--secondary-blue) !important;
    }

    /* Responsive */
    @@media (max-width: 1200px) {
        .stats-grid {
            grid-template-columns: repeat(2, 1fr);
        }
    }

    @@media (max-width: 992px) {
        .app-container {
            padding: 1.5rem;
        }

        .header-section {
            flex-direction: column;
            text-align: center;
            gap: 1rem;
        }

        .section-title::after {
            left: 50%;
            transform: translateX(-50%);
        }
    }

    @@media (max-width: 768px) {
        .app-container {
            padding: 1rem;
        }

        .stats-grid {
            grid-template-columns: 1fr;
        }

        .section-title {
            font-size: 1.5rem;
        }
        /* .chart-container {
                    height: 350px;
                } */
        /* .large-chart {
                    height: 400px;
                } */
    }

    @@media (max-width: 576px) {
        .stat-number {
            font-size: 1.75rem;
        }

        .stat-icon {
            font-size: 2.25rem;
        }
        /* .chart-container {
                    height: 300px;
                } */
        /* .large-chart {
                    height: 350px;
                } */

        .btn {
            padding: 0.65rem 1.25rem;
        }

        .card-body {
            padding: 1.25rem;
        }
        /* Tabs */
        .nav-tabs {
            border-bottom: 1px solid #e2e8f0;
            margin-bottom: 1.5rem;
        }

            .nav-tabs .nav-link {
                border: none;
                color: var(--secondary);
                font-weight: 500;
                padding: 0.75rem 1.5rem;
                border-radius: 8px 8px 0 0;
            }

                .nav-tabs .nav-link.active {
                    color: var(--primary);
                    background-color: transparent;
                    border-bottom: 3px solid var(--primary);
                }
        /* Responsive */
        @@media (max-width: 992px) {
            .app-container {
                padding: 1rem;
            }

            .stats-grid {
                grid-template-columns: repeat(2, 1fr);
            }
        }
    }</style>

<div class="app-container" ng-app="SedeshuApp" ng-controller="indexController" ng-init="init(@JsonSedeshu.SerializeObject(Model))">
    <partial name="_Loading_Partial" />
    <div ng-cloak>

        <!-- Header Section -->
        <div class="header-section">
            <h1 class="section-title">Estad√≠sticas Generales</h1>
            <div class="d-flex align-items-center gap-2">
                <span class="me-2 d-none d-md-block">Actualizar datos</span>
                <button class="btn btn-outline-secondary" ng-click="cargarEstadisticas()" ng-disabled="loading || Inicio == '' || Fin == ''">
                    <i class="fas fa-sync-alt"></i>
                </button>
            </div>
        </div>

        <!-- Filters Card -->
        <div class="card">
            <div class="card-header text-white">
                <h5 class="mb-0"><i class="fas fa-filter me-2"></i>Filtros de B√∫squeda</h5>
            </div>
            <div class="card-body">
                <div class="row g-3">
                    <div class="col-12 col-md-6">
                        <label class="filter-label">Municipios</label>
                        <select class="form-select selectpicker2" ng-model="MunicipiosId" multiple ng-change="seleccionarMunicipios()" data-live-search="true" data-title="Seleccione">
                            <option ng-repeat="Municipio in municipios" ng-value="Municipio.Id">{{Municipio.Nombre}}</option>
                        </select>
                    </div>

                    <div class="col-12 col-md-6">
                        <label class="filter-label">Localidades</label>
                        <select class="form-select selectpicker2" ng-model="LocalidadesId" multiple ng-change="seleccionarLocalidad()" data-live-search="true" data-title="Seleccione" ng-disabled="locGrupos == '' || locGrupos.length <= 0">
                            <optgroup ng-repeat="(municipio, localidades) in locGrupos" label="{{municipio}}">
                                <option ng-repeat="localidad in localidades" ng-value="localidad.Id">{{localidad.Nombre}}</option>
                            </optgroup>
                        </select>
                    </div>

                    <div class="col-12 col-md-6">
                        <label class="filter-label required">Fecha Inicio</label>
                        <input type="date" ng-model="Inicio" placeholder="yyyy-MM-dd" class="form-control" required />
                        <span class="text-danger small">{{ errors["Inicio"] }}</span>
                    </div>

                    <div class="col-12 col-md-6">
                        <label class="filter-label required">Fecha Fin</label>
                        <input type="date" ng-model="Fin" placeholder="yyyy-MM-dd" class="form-control" required />
                        <span class="text-danger small">{{ errors["Fin"] }}</span>
                    </div>

                    <div class="col-12 col-md-12 d-flex align-items-end">
                        <button class="btn btn-primary w-100" ng-click="cargarEstadisticas()" ng-if="!loading" ng-disabled="loading || Inicio == '' || Fin == ''">
                            <i class="fa fa-search me-2"></i> Buscar
                        </button>
                        <button class="btn btn-primary w-100" ng-if="loading" disabled>
                            <i class="fa fa-spinner fa-spin me-2"></i> Procesando...
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Stats Overview -->
        <div class="stats-grid">
            <div class="stat-card">
                <i class="fas fa-edit stat-icon"></i>
                <div class="stat-number">{{formatoNumero(totalGeneral)}}</div>
                <div class="stat-label">Total de encuestas</div>
            </div>
            <div class="stat-card completed">
                <i class="fas fa-check-circle stat-icon"></i>
                <div class="stat-number">{{formatoNumero(totalCompletas)}}</div>
                <div class="stat-label">Encuestas completas</div>
            </div>
            <div class="stat-card incompleted">
                <i class="fas fa-exclamation-circle stat-icon"></i>
                <div class="stat-number">{{formatoNumero(totalIncompletas)}}</div>
                <div class="stat-label">Encuestas incompletas</div>
            </div>
            <div class="stat-card efficiency">
                <i class="fas fa-chart-line stat-icon"></i>
                <div class="stat-number">{{(totalGeneral > 0 ? (totalCompletas / totalGeneral * 100) : 0) | number:1}}%</div>
                <div class="stat-label">Tasa de efectividad</div>
            </div>
            <div class="stat-card average">
                <i class="far fa-clock stat-icon"></i>
                <div class="stat-number">{{formatoTiempo(encuestasPromedio)}}</div>
                <div class="stat-label">Promedio de captura</div>
            </div>

            <div class="stat-card surveys">
                <i class="far fa-calendar-alt stat-icon"></i>
                <div class="stat-number">{{formatoNumero(diasPromedio)}}</div>
                <div class="stat-label">Encuestas por d√≠a</div>
            </div>
        </div>


        <!-- Main Content Tabs -->
        <ul class="nav nav-tabs" id="statsTabs" role="tablist">
            <li class="nav-item" role="presentation">
                <button class="nav-link active" id="overview-tab" data-bs-toggle="tab" data-bs-target="#overview" type="button" role="tab">Resumen General</button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="encuestadores-tab" data-bs-toggle="tab" data-bs-target="#encuestadores" type="button" role="tab">Desempe√±o por Encuestador</button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="peores-tab" data-bs-toggle="tab" data-bs-target="#peores" type="button" role="tab">Encuestadores con menor desempe√±o</button>
            </li>
            @* <li class="nav-item" role="presentation">
                    <button class="nav-link" id="temporal-tab" data-bs-toggle="tab" data-bs-target="#temporal" type="button" role="tab">Evoluci√≥n Temporal</button>
                </li> *@
        </ul>

        <div class="tab-content" id="statsTabContent">
            <!-- Overview Tab -->
            <div class="tab-pane fade show active" id="overview" role="tabpanel">
                <div class="row">
                    <div class="col-12 col-lg-8">
                        <div class="card">
                            <div class="card-header">
                                <h5 class="mb-0">Distribuci√≥n de Encuestas</h5>
                            </div>
                            <div class="card-body">
                                <div id="totalesChart" class="large-chart chart-container"></div>
                            </div>
                        </div>
                    </div>
                    <div class="col-12 col-lg-4">
                        <div class="card">
                            <div class="card-header">
                                <h5 class="mb-0">M√©tricas Adicionales</h5>
                            </div>
                            <div class="card-body">
                                <div class="d-flex justify-content-between align-items-center mb-3">
                                    <div>
                                        <h6 class="mb-0">Personas encuestadas</h6>
                                        <small class="text-muted">Total de personas</small>
                                    </div>
                                    <span class="badge bg-primary">{{formatoNumero(encuestadosCount)}}</span>
                                </div>
                                <div class="d-flex justify-content-between align-items-center mb-3">
                                    <div>
                                        <h6 class="mb-0">Familias registradas</h6>
                                        <small class="text-muted">Total de familias</small>
                                    </div>
                                    <span class="badge bg-primary">{{formatoNumero(familiasCount)}}</span>
                                </div>
                                <div class="d-flex justify-content-between align-items-center mb-3">
                                    <div>
                                        <h6 class="mb-0">Promedio de captura</h6>
                                        <small class="text-muted">Tiempo por encuesta</small>
                                    </div>
                                    <span class="badge bg-info">{{formatoTiempo(encuestasPromedio)}}</span>
                                </div>
                                <div class="d-flex justify-content-between align-items-center">
                                    <div>
                                        <h6 class="mb-0">Encuestas por d√≠a</h6>
                                        <small class="text-muted">Promedio diario</small>
                                    </div>
                                    <span class="badge bg-success">{{formatoNumero(diasPromedio)}}</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Encuestadores Tab -->
            <div class="tab-pane fade" id="encuestadores" role="tabpanel">
                <div class="row">
                    <div class="col-12 col-lg-8">
                        <div class="card">
                            <div class="card-header">
                                <h5 class="mb-0">Top 10 Encuestadores</h5>
                            </div>
                            <!-- Gr√°fica Vertical Mejorada -->
                            <div class="col-12 mb-4">
                                <div id="encuestadoresChart" class="large-chart chart-container"></div>
                            </div>
                        </div>
                    </div>

                    <!-- Leaderboard Detallado Mejorado -->
                    <div class="col-12 col-lg-4">
                        <div class="card leaderboard-card">
                            <div class="card-body">
                                <h6 class="text-center mb-3" style="color: var(--primary-blue); font-weight: 600;">
                                    <i class="fas fa-ranking-star me-2"></i>Ranking Detallado
                                </h6>
                                <div class="leader-list">
                                    <div class="leader-item d-flex align-items-center" ng-repeat="item in encuestadoresArray | orderBy:'-value[1]' | limitTo:10 track by $index">
                                        <div class="leader-rank me-3" ng-class="{'rank-1': $index == 0, 'rank-2': $index == 1, 'rank-3': $index == 2}">
                                            {{$index + 1}}
                                        </div>
                                        <div class="flex-grow-1">
                                            <div class="leader-name">{{item.key}}</div>
                                            <div class="leader-stats">
                                                {{item.value[1]}} completas de {{item.value[0]}} totales
                                                ({{(item.value[0] > 0 ? (item.value[1] / item.value[0] * 100) : 0) | number:1}}% efectividad)
                                            </div>
                                            <div class="progress mt-2">
                                                <div class="progress-bar" role="progressbar"
                                                     style="width: {{(item.value[1] / item.value[0]) * 100}}%;"
                                                     aria-valuenow="{{(item.value[1] / item.value[0]) * 100}}"
                                                     aria-valuemin="0" aria-valuemax="100">
                                                </div>
                                            </div>
                                        </div>
                                        <div class="stats-badge ms-2">
                                            {{item.value[1]}}
                                        </div>
                                    </div>
                                    <div class="text-center p-3" ng-if="!encuestadoresArray || encuestadoresArray.length === 0">
                                        <i class="fas fa-inbox fa-2x mb-2 text-muted"></i>
                                        <p class="text-muted">No hay datos de encuestadores</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Peores Encuestadores Tab -->
            <div class="tab-pane fade" id="peores" role="tabpanel">
                <div class="row">
                    <div class="col-12 col-lg-8">
                        <div class="card">
                            <div class="card-header">
                                <h5 class="mb-0">Top 10 Peores Encuestadores</h5>
                            </div>
                            <!-- Gr√°fica para peores encuestadores -->
                            <div class="col-12 mb-4">
                                <div id="peoresEncuestadoresChart" class="large-chart chart-container"></div>
                            </div>
                        </div>
                    </div>

                    <!-- Leaderboard para peores encuestadores -->
                    <div class="col-12 col-lg-4">
                        <div class="card leaderboard-card">
                            <div class="card-body">
                                <h6 class="text-center mb-3" style="color: var(--primary-blue); font-weight: 600;">
                                    <i class="fas fa-exclamation-triangle me-2"></i>Peores Encuestadores
                                </h6>
                                <div class="leader-list">
                                    <div class="leader-item d-flex align-items-center" ng-repeat="item in peoresEncuestadoresArray | orderBy:'value[1]' | limitTo:10 track by $index">
                                        <div class="leader-rank me-3 rank-last">
                                            {{$index + 1}}
                                        </div>
                                        <div class="flex-grow-1">
                                            <div class="leader-name">{{item.key}}</div>
                                            <div class="leader-stats">
                                                {{item.value[1]}} completas de {{item.value[0]}} totales
                                                ({{(item.value[0] > 0 ? (item.value[1] / item.value[0] * 100) : 0) | number:1}}% efectividad)
                                            </div>
                                            <div class="progress mt-2">
                                                <div class="progress-bar bg-danger" role="progressbar"
                                                     style="width: {{(item.value[1] / item.value[0]) * 100}}%;"
                                                     aria-valuenow="{{(item.value[1] / item.value[0]) * 100}}"
                                                     aria-valuemin="0" aria-valuemax="100">
                                                </div>
                                            </div>
                                        </div>
                                        <div class="stats-badge ms-2 bg-danger">
                                            {{item.value[1]}}
                                        </div>
                                    </div>
                                    <div class="text-center p-3" ng-if="!peoresEncuestadoresArray || peoresEncuestadoresArray.length === 0">
                                        <i class="fas fa-inbox fa-2x mb-2 text-muted"></i>
                                        <p class="text-muted">No hay datos de encuestadores</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Temporal Tab -->
            <div class="tab-pane fade" id="temporal" role="tabpanel">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">Evoluci√≥n de Encuestas en el Tiempo</h5>
                    </div>
                    <div class="card-body">
                        <div id="evolucionChart" class="large-chart chart-container"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Scripts -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap-select@1.14.0-beta3/dist/js/bootstrap-select.min.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.8.2/angular.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/angular-ui-bootstrap/2.5.6/ui-bootstrap-tpls.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.21/lodash.min.js"></script>
<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>

<script>
    (() => {
        var app = angular.module('SedeshuApp', ['ui.bootstrap']);
        var baseUrl = document.baseURI;

        // Filtro para convertir objeto to array
        app.filter('toArray', function() {
            return function(obj) {
                if (!obj) return [];
                return Object.keys(obj).map(function(key) {
                    return {
                        key: key,
                        value: obj[key]
                    };
                });
            };
        });

        app.controller('indexController',
            ($scope, $http, $uibModal) => {
                $scope.maxsize = 5;
                $scope.totalcount = 0;
                $scope.granTotal = 0;
                $scope.pageIndex = 1;
                $scope.pageSize = 10;
                $scope.numPages = 0;
                $scope.loading = false;

                $scope.dependencias = [];
                $scope.municipios = [];
                $scope.locGrupos = [];
                $scope.agGrupos = [];
                $scope.aplicaciones = [];
                $scope.totalGeneral = 0;
                $scope.totalCompletas = 0;
                $scope.totalIncompletas = 0;
                $scope.encuestadosCount = 0;
                $scope.familiasCount = 0;
                $scope.encuestasPromedio = 0;
                $scope.diasPromedio = 0;
                $scope.encuestadoresList = {};
                $scope.encuestadoresArray = [];
                $scope.peoresEncuestadoresArray = [];
                $scope.datosDiarios = []; // Nuevo: Datos diarios desde el backend

                // Variables para almacenar instancias de gr√°ficas
                $scope.totalesChart = null;
                $scope.encuestadoresChart = null;
                $scope.peoresEncuestadoresChart = null;
                $scope.evolucionChart = null;

                $scope.DependenciaId = '';
                $scope.MunicipiosId = [];
                $scope.LocalidadesId = [];
                $scope.AgebsId = [];
                let fecha = new Date();
                $scope.Inicio = new Date(fecha.setMonth(fecha.getMonth() - 1));
                $scope.Fin = new Date();

                $scope.init = model => {
                    $scope.dependencias = model.Dependencias;
                    $scope.municipios = model.Municipios;
                    $scope.refreshSelect();

                    // Inicializar event listener para tabs
                    setTimeout(() => {
                        const tabEls = document.querySelectorAll('button[data-bs-toggle="tab"]');
                        tabEls.forEach(tabEl => {
                            tabEl.addEventListener('shown.bs.tab', (e) => {
                                $scope.redrawChartForActiveTab();
                            });
                        });
                    }, 500);
                };

                // Funci√≥n para redibujar la gr√°fica de la pesta√±a activa
                $scope.redrawChartForActiveTab = function() {
                    const activeTab = document.querySelector('#statsTabs .nav-link.active');
                    if (!activeTab) return;

                    const targetId = activeTab.getAttribute('data-bs-target');

                    switch(targetId) {
                        case '#overview':
                            if ($scope.totalesChart) {
                                setTimeout(() => {
                                    $scope.totalesChart.draw($scope.totalesChartData, $scope.totalesChartOptions);
                                }, 100);
                            }
                            break;
                        case '#encuestadores':
                            if ($scope.encuestadoresChart) {
                                setTimeout(() => {
                                    $scope.encuestadoresChart.draw($scope.encuestadoresChartData, $scope.encuestadoresChartOptions);
                                }, 100);
                            }
                            break;
                        case '#peores':
                            if ($scope.peoresEncuestadoresChart) {
                                setTimeout(() => {
                                    $scope.peoresEncuestadoresChart.draw($scope.peoresEncuestadoresChartData, $scope.peoresEncuestadoresChartOptions);
                                }, 100);
                            }
                            break;
                        case '#temporal':
                            if ($scope.evolucionChart) {
                                setTimeout(() => {
                                    $scope.evolucionChart.draw($scope.evolucionChartData, $scope.evolucionChartOptions);
                                }, 100);
                            }
                            break;
                    }
                };

                // Funci√≥n auxiliar para formato de n√∫meros
                $scope.formatoNumero = function(numero, formato = 'en-ES', decimals = 0) {
                    if (numero === null || numero === undefined || isNaN(numero)) return '0';
                    return Intl.NumberFormat(formato, {
                        maximumFractionDigits: decimals,
                        minimumFractionDigits: decimals
                    }).format(numero);
                };

                $scope.formatoTiempo = valor => {
                    if (valor && valor != "") {
                        let stringReturn = "";
                        let arrTiempos = valor.split(":");
                        let arrHora = arrTiempos[0].split(".");
                        if (arrHora.length > 1) {
                            stringReturn += arrHora[0] + " d " + arrHora[1] + " h ";
                        } else {
                            stringReturn += arrHora[0] + " h ";
                        }
                        stringReturn += arrTiempos[1] + " m ";
                        let arrSegundos = arrTiempos[2].split(".");
                        stringReturn += arrSegundos[0] + " s.";
                        return  stringReturn;
                    } else {
                        return "Sin datos.";
                    }
                };

                $scope.seleccionarMunicipios = () => {
                    $scope.loading = true;
                    if ($scope.MunicipiosId.length > 0) {
                        $http.get(baseUrl + 'Localidad/ByMunicipios/' + $scope.MunicipiosId.join()).then(response => {
                            let localidades = response.data;
                            if (localidades != null) {
                                $scope.locGrupos = localidades;
                            }
                            $scope.refreshSelect();
                            $scope.loading = false;
                        });
                    } else {
                        $scope.locGrupos = [];
                        $scope.LocalidadesId = [];
                        $scope.refreshSelect();
                        $scope.loading = false;
                    }
                };

                $scope.seleccionarLocalidad = () => {
                    $scope.loading = true;
                    if ($scope.LocalidadesId.length > 0) {
                        $http.get(baseUrl + 'Ageb/ByLocalidades/' + $scope.LocalidadesId.join()).then(response => {
                            let agebs = response.data;
                            if (agebs != null) {
                                $scope.agGrupos = agebs;
                            }
                            $scope.refreshSelect();
                            $scope.loading = false;
                        });
                    } else {
                        $scope.agGrupos = [];
                        $scope.AgebsId = [];
                        $scope.refreshSelect();
                        $scope.loading = false;
                    }
                };

                $scope.buildEncuestadoresChart = () => {
                    google.charts.load('current', {packages: ['corechart', 'bar']});
                    const drawMultSeries = () => {
                        let encuestadoresData = [
                            ['Encuestador', 'Completas', 'Incompletas'],
                        ];

                        if ($scope.encuestadoresArray && $scope.encuestadoresArray.length > 0) {
                            // Ordenar por completas (descendente) y tomar top 10
                            const sortedLeaders = $scope.encuestadoresArray
                                .sort((a, b) => b.value[1] - a.value[1])
                                .slice(0, 10);

                            sortedLeaders.forEach((item) => {
                                // Acortar nombres largos para mejor visualizaci√≥n
                                const shortName = item.key.length > 15 ? item.key.substring(0, 15) + '...' : item.key;
                                encuestadoresData.push([shortName, item.value[1], item.value[2]]);
                            });
                        } else {
                            encuestadoresData.push(["Sin datos", 0, 0]);
                        }

                        $scope.encuestadoresChartData = google.visualization.arrayToDataTable(encuestadoresData);

                        $scope.encuestadoresChartOptions = {
                            title: 'Top 10 Encuestadores por Encuestas Completas',
                            chartArea: {
                                width: '70%',
                                height: '75%',
                                left: 120
                            },
                            hAxis: {
                                title: 'Cantidad de Encuestas',
                                minValue: 0,
                                gridlines: { count: 5 }
                            },
                            vAxis: {
                                title: 'Encuestadores'
                            },
                            colors: ['#27ae60', '#e74c3c'],
                            isStacked: true,
                            legend: {
                                position: 'top',
                                alignment: 'center'
                            },
                            fontSize: 12,
                            fontName: 'Segoe UI',
                            animation: {
                                startup: true,
                                duration: 1000,
                                easing: 'out'
                            }
                        };

                        $scope.encuestadoresChart = new google.visualization.BarChart(document.getElementById('encuestadoresChart'));
                        $scope.encuestadoresChart.draw($scope.encuestadoresChartData, $scope.encuestadoresChartOptions);
                    };
                    google.charts.setOnLoadCallback(drawMultSeries);
                };

                $scope.buildPeoresEncuestadoresChart = () => {
                    google.charts.load('current', {packages: ['corechart', 'bar']});
                    const drawMultSeries = () => {
                        let peoresEncuestadoresData = [
                            ['Encuestador', 'Completas', 'Incompletas'],
                        ];

                        if ($scope.peoresEncuestadoresArray && $scope.peoresEncuestadoresArray.length > 0) {
                            // Ordenar por completas (ascendente) y tomar los 10 peores
                            const sortedWorst = $scope.peoresEncuestadoresArray
                                .sort((a, b) => a.value[1] - b.value[1])
                                .slice(0, 10);

                            sortedWorst.forEach((item) => {
                                // Acortar nombres largos para mejor visualizaci√≥n
                                const shortName = item.key.length > 15 ? item.key.substring(0, 15) + '...' : item.key;
                                peoresEncuestadoresData.push([shortName, item.value[1], item.value[2]]);
                            });
                        } else {
                            peoresEncuestadoresData.push(["Sin datos", 0, 0]);
                        }

                        $scope.peoresEncuestadoresChartData = google.visualization.arrayToDataTable(peoresEncuestadoresData);

                        $scope.peoresEncuestadoresChartOptions = {
                            title: 'Top 10 Peores Encuestadores',
                            chartArea: {
                                width: '70%',
                                height: '75%',
                                left: 120
                            },
                            hAxis: {
                                title: 'Cantidad de Encuestas',
                                minValue: 0,
                                gridlines: { count: 5 }
                            },
                            vAxis: {
                                title: 'Encuestadores'
                            },
                            colors: ['#e74c3c', '#27ae60'],
                            isStacked: true,
                            legend: {
                                position: 'top',
                                alignment: 'center'
                            },
                            fontSize: 12,
                            fontName: 'Segoe UI',
                            animation: {
                                startup: true,
                                duration: 1000,
                                easing: 'out'
                            }
                        };

                        $scope.peoresEncuestadoresChart = new google.visualization.BarChart(document.getElementById('peoresEncuestadoresChart'));
                        $scope.peoresEncuestadoresChart.draw($scope.peoresEncuestadoresChartData, $scope.peoresEncuestadoresChartOptions);
                    };
                    google.charts.setOnLoadCallback(drawMultSeries);
                };

                $scope.buildTotalesChart = () => {
                    google.charts.load("current", { packages: ["corechart"] });
                    const drawTotalesChart = () => {
                        $scope.totalesChartData = google.visualization.arrayToDataTable([
                            ['Aplicaciones', 'Total'],
                            ['Completas', $scope.totalCompletas],
                            ['Incompletas', $scope.totalIncompletas],
                        ]);

                        $scope.totalesChartOptions = {
                            title: 'Total de encuestas realizadas',
                            pieHole: 0.4,
                            colors: ['#27ae60', '#e74c3c'],
                            chartArea: {width: '90%', height: '80%'},
                            legend: {position: 'labeled'},
                            pieSliceText: 'value',
                            fontSize: 12,
                            fontName: 'Segoe UI'
                        };

                        $scope.totalesChart = new google.visualization.PieChart(document.getElementById('totalesChart'));
                        $scope.totalesChart.draw($scope.totalesChartData, $scope.totalesChartOptions);
                    }
                    google.charts.setOnLoadCallback(drawTotalesChart);
                };

                $scope.buildEvolucionChart = () => {
                    google.charts.load('current', {packages: ['corechart', 'line']});
                    const drawEvolucionChart = () => {
                        let evolucionData = [
                            ['Fecha', 'Encuestas Completas', 'Encuestas Incompletas', 'Encuestas Totales'],
                        ];

                        // Usar datos reales del backend
                        if ($scope.datosDiarios && $scope.datosDiarios.length > 0) {
                            $scope.datosDiarios.forEach((dia) => {
                                evolucionData.push([
                                    dia.Fecha,
                                    dia.Completas,
                                    dia.Incompletas,
                                    dia.Totales
                                ]);
                            });
                        } else {
                            // Si no hay datos, mostrar mensaje
                            evolucionData.push(['Sin datos', 0, 0, 0]);
                        }

                        $scope.evolucionChartData = google.visualization.arrayToDataTable(evolucionData);

                        $scope.evolucionChartOptions = {
                            title: 'Evoluci√≥n de Encuestas por D√≠a',
                            curveType: 'function',
                            legend: { position: 'bottom' },
                            chartArea: {width: '85%', height: '75%'},
                            hAxis: {
                                title: 'Fecha',
                                gridlines: { count: 10 }
                            },
                            vAxis: {
                                title: 'N√∫mero de Encuestas'
                            },
                            colors: ['#27ae60', '#e74c3c', '#3498db'],
                            fontSize: 12,
                            fontName: 'Segoe UI',
                            animation: {
                                startup: true,
                                duration: 1000,
                                easing: 'out'
                            }
                        };

                        $scope.evolucionChart = new google.visualization.LineChart(document.getElementById('evolucionChart'));
                        $scope.evolucionChart.draw($scope.evolucionChartData, $scope.evolucionChartOptions);
                    };
                    google.charts.setOnLoadCallback(drawEvolucionChart);
                };

                $scope.cargarEstadisticas = () => {
                    if ($scope.Inicio != '' && $scope.Fin != '') {
                        $scope.loading = true;
                        $http.post(baseUrl + 'Diagnosticos/GetEstadisticas', {
                            DependenciaId: $scope.DependenciaId,
                            MunicipiosId: $scope.MunicipiosId.join() != "" ? $scope.MunicipiosId.join() : null,
                            LocalidadesId: $scope.LocalidadesId.join() != "" ? $scope.LocalidadesId.join() : null,
                            AgebsId: $scope.AgebsId.join() != "" ? $scope.AgebsId.join() : null,
                            Inicio: $scope.Inicio,
                            Fin: $scope.Fin,
                        }).then(response => {
                            $scope.aplicaciones = response.data.Aplicaciones;
                            $scope.totalGeneral = response.data.TotalGeneral;
                            $scope.totalCompletas = response.data.TotalCompletas;
                            $scope.totalIncompletas = response.data.TotalIncompletas;
                            $scope.encuestadosCount = response.data.EncuestadosCount;
                            $scope.familiasCount = response.data.FamiliasCount;
                            $scope.encuestasPromedio = response.data.EncuestasPromedio;
                            $scope.diasPromedio = response.data.DiasPromedio;
                            $scope.encuestadoresList = response.data.EncuestadoresList || {};
                            $scope.datosDiarios = response.data.DatosDiarios || []; // Nuevo: Datos diarios

                            // Convertir a array para el ranking de mejores
                            $scope.encuestadoresArray = Object.keys($scope.encuestadoresList).map(function(key) {
                                return {
                                    key: key,
                                    value: $scope.encuestadoresList[key]
                                };
                            });

                            // Convertir a array para el ranking de peores
                            $scope.peoresEncuestadoresArray = Object.keys($scope.encuestadoresList).map(function(key) {
                                return {
                                    key: key,
                                    value: $scope.encuestadoresList[key]
                                };
                            });

                            $scope.buildTotalesChart();
                            $scope.buildEncuestadoresChart();
                            $scope.buildPeoresEncuestadoresChart();
                            $scope.buildEvolucionChart();

                            $scope.loading = false;
                        }).catch(function (err) {
                            $scope.loading = false;
                            alert("Ha ocurrido un error al procesar la consulta");
                            console.error('An error occurred:', err);
                        });
                    }
                };

                $scope.exportToExcel = function() {
                    // Crear datos de ejemplo para exportar
                    const data = [
                        ['Estad√≠sticas Generales', '', '', ''],
                        ['', '', '', ''],
                        ['M√©trica', 'Valor', '', ''],
                        ['Total de encuestas', $scope.totalGeneral, '', ''],
                        ['Encuestas completas', $scope.totalCompletas, '', ''],
                        ['Encuestas incompletas', $scope.totalIncompletas, '', ''],
                        ['Personas encuestadas', $scope.encuestadosCount, '', ''],
                        ['Familias', $scope.familiasCount, '', ''],
                        ['Promedio de captura', $scope.encuestasPromedio, '', ''],
                        ['Encuestas por d√≠a', $scope.diasPromedio, '', ''],
                        ['', '', '', ''],
                        ['Top Encuestadores', 'Total', 'Completas', 'Efectividad'],
                    ];

                    // Agregar datos de encuestadores
                    if ($scope.encuestadoresArray && $scope.encuestadoresArray.length > 0) {
                        const sortedLeaders = $scope.encuestadoresArray
                            .sort((a, b) => b.value[1] - a.value[1])
                            .slice(0, 10);

                        sortedLeaders.forEach((item) => {
                            const efectividad = item.value[0] > 0 ? (item.value[1] / item.value[0] * 100) : 0;
                            data.push([item.key, item.value[0], item.value[1], efectividad.toFixed(1) + '%']);
                        });
                    }

                    // Agregar datos de peores encuestadores
                    data.push(['', '', '', '']);
                    data.push(['Peores Encuestadores', 'Total', 'Completas', 'Efectividad']);

                    if ($scope.peoresEncuestadoresArray && $scope.peoresEncuestadoresArray.length > 0) {
                        const sortedWorst = $scope.peoresEncuestadoresArray
                            .sort((a, b) => a.value[1] - b.value[1])
                            .slice(0, 10);

                        sortedWorst.forEach((item) => {
                            const efectividad = item.value[0] > 0 ? (item.value[1] / item.value[0] * 100) : 0;
                            data.push([item.key, item.value[0], item.value[1], efectividad.toFixed(1) + '%']);
                        });
                    }

                    // Crear libro de Excel
                    const ws = XLSX.utils.aoa_to_sheet(data);
                    const wb = XLSX.utils.book_new();
                    XLSX.utils.book_append_sheet(wb, ws, "Estad√≠sticas");

                    // Guardar archivo
                    const fileName = "estadisticas_generales_" + new Date().toISOString().split('T')[0] + ".xlsx";
                    XLSX.writeFile(wb, fileName);
                };

                $scope.clickTrabajadorRow = trabajador => {
                    trabajador.IsOpened = !trabajador.IsOpened
                };

                $scope.refreshSelect = _.debounce(() => {
                    $('.selectpicker2').selectpicker('refresh');
                }, 100);

                $scope.randomColor = () => {
                    return Math.floor(Math.random()*16777215).toString(16);
                }
            }
        );
    })();
</script>