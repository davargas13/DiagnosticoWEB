// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using DiagnosticoWeb.Database;

namespace DiagnosticoWeb.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200806151312_AddFechaSincronizacionAplicacion")]
    partial class AddFechaSincronizacionAplicacion
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-rtm-30799")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.Ageb", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Clave");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("EstadoId");

                    b.Property<string>("LocalidadId");

                    b.Property<string>("MunicipioId");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("LocalidadId");

                    b.ToTable("Agebs");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.Aplicacion", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Activa");

                    b.Property<string>("BeneficiarioId");

                    b.Property<string>("Carencias");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("EncuestaVersionId");

                    b.Property<string>("Estatus");

                    b.Property<DateTime?>("FechaFin");

                    b.Property<DateTime?>("FechaInicio");

                    b.Property<int>("NumeroAplicacion");

                    b.Property<string>("TrabajadorId");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("BeneficiarioId");

                    b.HasIndex("EncuestaVersionId");

                    b.HasIndex("TrabajadorId");

                    b.ToTable("Aplicaciones");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.AplicacionPregunta", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AplicacionId");

                    b.Property<string>("Complemento");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("Grado");

                    b.Property<string>("PreguntaId");

                    b.Property<string>("RespuestaId");

                    b.Property<string>("RespuestaIteracion");

                    b.Property<double>("RespuestaValor");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("Valor");

                    b.Property<string>("ValorCatalogo");

                    b.Property<DateTime?>("ValorFecha");

                    b.Property<int?>("ValorNumerico");

                    b.HasKey("Id");

                    b.HasIndex("AplicacionId");

                    b.HasIndex("PreguntaId");

                    b.HasIndex("RespuestaId");

                    b.ToTable("AplicacionPreguntas");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("DependenciaId");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<DateTime?>("LastLoginDate");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PerfilId");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("DependenciaId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.Archivo", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Base64")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("Nombre");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Archivos");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.Beneficiario", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApellidoMaterno");

                    b.Property<string>("ApellidoPaterno");

                    b.Property<string>("CausaDiscapacidadId");

                    b.Property<string>("Comentarios");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Curp");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DiscapacidadGradoId");

                    b.Property<string>("DiscapacidadId");

                    b.Property<string>("EstadoCivilId");

                    b.Property<string>("EstadoId");

                    b.Property<bool>("Estatus");

                    b.Property<string>("EstatusInformacion");

                    b.Property<DateTime>("EstatusUpdatedAt");

                    b.Property<string>("EstudioId");

                    b.Property<DateTime?>("FechaNacimiento");

                    b.Property<string>("Folio");

                    b.Property<string>("GradoEstudioId");

                    b.Property<string>("HijoId");

                    b.Property<string>("Huellas");

                    b.Property<bool>("MismoDomicilio");

                    b.Property<string>("Nombre");

                    b.Property<string>("PadreId");

                    b.Property<string>("ParentescoId");

                    b.Property<string>("Rfc");

                    b.Property<string>("SexoId");

                    b.Property<string>("TrabajadorId");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CausaDiscapacidadId");

                    b.HasIndex("DiscapacidadGradoId");

                    b.HasIndex("DiscapacidadId");

                    b.HasIndex("EstadoCivilId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("EstudioId");

                    b.HasIndex("GradoEstudioId");

                    b.HasIndex("PadreId");

                    b.HasIndex("ParentescoId");

                    b.HasIndex("SexoId");

                    b.HasIndex("TrabajadorId");

                    b.ToTable("Beneficiarios");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.BeneficiarioHistorico", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApellidoMaterno");

                    b.Property<string>("ApellidoPaterno");

                    b.Property<string>("BeneficiarioId");

                    b.Property<string>("CausaDiscapacidadId");

                    b.Property<string>("Comentarios");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Curp");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DiscapacidadGradoId");

                    b.Property<string>("DiscapacidadId");

                    b.Property<string>("EstadoCivilId");

                    b.Property<string>("EstadoId");

                    b.Property<bool>("Estatus");

                    b.Property<string>("EstatusInformacion");

                    b.Property<DateTime>("EstatusUpdatedAt");

                    b.Property<string>("EstudioId");

                    b.Property<DateTime?>("FechaNacimiento");

                    b.Property<string>("Folio");

                    b.Property<string>("GradoEstudioId");

                    b.Property<string>("Huellas");

                    b.Property<string>("Nombre");

                    b.Property<string>("Rfc");

                    b.Property<string>("SexoId");

                    b.Property<string>("TrabajadorId");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("BeneficiarioId");

                    b.HasIndex("CausaDiscapacidadId");

                    b.HasIndex("DiscapacidadGradoId");

                    b.HasIndex("DiscapacidadId");

                    b.HasIndex("EstadoCivilId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("EstudioId");

                    b.HasIndex("GradoEstudioId");

                    b.HasIndex("SexoId");

                    b.HasIndex("TrabajadorId");

                    b.ToTable("BeneficiarioHistorico");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.Bitacora", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Accion");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("Mensaje");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UsuarioId");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Bitacora");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.Camino", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("Nombre");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Caminos");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.Carencia", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Clave");

                    b.Property<string>("Color");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("Nombre");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Carencias");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.Carretera", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("Nombre");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Carreteras");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.CausaDiscapacidad", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("Nombre");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("CausaDiscapacidad");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.Configuracion", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<double?>("MetrosRadio");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Configuracion");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.Dependencia", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("Nombre");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Dependencias");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.Discapacidad", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("Nombre");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Discapacidades");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.DiscapacidadGrado", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DiscapacidadId");

                    b.Property<string>("Grado");

                    b.Property<string>("GradoId");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("GradoId");

                    b.ToTable("DiscapacidadGrado");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.Domicilio", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Activa");

                    b.Property<string>("AgebCalculado");

                    b.Property<string>("AgebId");

                    b.Property<string>("BeneficiarioId");

                    b.Property<string>("CadenaOCR");

                    b.Property<string>("CallePosterior");

                    b.Property<string>("CaminoId");

                    b.Property<string>("CarreteraId");

                    b.Property<string>("CodigoPostal");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DomicilioN");

                    b.Property<string>("Email");

                    b.Property<string>("EntreCalle1");

                    b.Property<string>("EntreCalle2");

                    b.Property<double>("Latitud");

                    b.Property<double?>("LatitudAtm");

                    b.Property<string>("LocalidadCalculado");

                    b.Property<string>("LocalidadId");

                    b.Property<double>("Longitud");

                    b.Property<double?>("LongitudAtm");

                    b.Property<string>("ManzanaCalculado");

                    b.Property<string>("ManzanaId");

                    b.Property<string>("MunicipioCalculado");

                    b.Property<string>("MunicipioId");

                    b.Property<string>("NombreAsentamiento");

                    b.Property<string>("Porcentaje");

                    b.Property<string>("Telefono");

                    b.Property<string>("TelefonoCasa");

                    b.Property<string>("TipoAsentamientoId");

                    b.Property<string>("TrabajadorId");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("ZapCalculado");

                    b.Property<string>("ZonaImpulsoId");

                    b.HasKey("Id");

                    b.HasIndex("AgebId");

                    b.HasIndex("BeneficiarioId");

                    b.HasIndex("LocalidadId");

                    b.HasIndex("MunicipioId");

                    b.HasIndex("TrabajadorId");

                    b.ToTable("Domicilio");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.Encuesta", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Activo");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("Mensaje");

                    b.Property<string>("Nombre");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<int>("Vigencia");

                    b.HasKey("Id");

                    b.ToTable("Encuestas");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.EncuestaVersion", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Activa");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("EncuestaId");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("EncuestaId");

                    b.ToTable("EncuestaVersiones");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.Estado", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Abreviacion");

                    b.Property<string>("Clave");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("Nombre");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Estados");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.EstadoCivil", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("Nombre");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("EstadosCiviles");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.Estudio", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("Nombre");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Estudios");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.Grado", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("Nombre");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Grados");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.GradosEstudio", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("Nombre");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("GradosEstudio");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.Importacion", b =>
                {
                    b.Property<string>("Clave")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ImportedAt");

                    b.Property<string>("UsuarioId");

                    b.HasKey("Clave");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Importaciones");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.Localidad", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Clave");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("EstadoId");

                    b.Property<string>("MunicipioId");

                    b.Property<string>("Nombre");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("ZonaIndigenaId");

                    b.HasKey("Id");

                    b.HasIndex("MunicipioId");

                    b.ToTable("Localidades");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.Manzana", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AgebId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("LocalidadId");

                    b.Property<string>("MunicipioId");

                    b.Property<string>("Nombre");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("LocalidadId");

                    b.HasIndex("MunicipioId");

                    b.ToTable("Manzanas");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.Municipio", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Clave");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("EstadoId");

                    b.Property<string>("Nombre");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("EstadoId");

                    b.ToTable("Municipios");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.MunicipioZona", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("MunicipioId");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("ZonaId");

                    b.HasKey("Id");

                    b.HasIndex("MunicipioId");

                    b.HasIndex("ZonaId");

                    b.ToTable("MunicipiosZonas");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.Ocupacion", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("Nombre");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Ocupaciones");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.Parentesco", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("Nombre");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Parentescos");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.Perfil", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("Nombre");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Perfil");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.PerfilPermiso", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("PerfilId");

                    b.Property<string>("PermisoId");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("PerfilPermiso");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.Permiso", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Clave");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("Nombre");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Permiso");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.Pregunta", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CarenciaId");

                    b.Property<string>("Catalogo");

                    b.Property<string>("Complemento");

                    b.Property<string>("Condicion");

                    b.Property<string>("CondicionIterable");

                    b.Property<bool>("CondicionLista");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<bool>("Editable");

                    b.Property<string>("EncuestaVersionId");

                    b.Property<bool>("EsNombre");

                    b.Property<string>("Expresion");

                    b.Property<string>("ExpresionEjemplo");

                    b.Property<bool>("Gradual");

                    b.Property<bool>("Iterable");

                    b.Property<string>("Nombre");

                    b.Property<int>("Numero");

                    b.Property<string>("TipoComplemento");

                    b.Property<string>("TipoPregunta");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("Variable");

                    b.HasKey("Id");

                    b.HasIndex("CarenciaId");

                    b.HasIndex("EncuestaVersionId");

                    b.ToTable("Preguntas");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.PreguntaGrado", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("Grado");

                    b.Property<string>("PreguntaId");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("PreguntaId");

                    b.ToTable("PreguntaGrado");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.ProgramaSocial", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DependenciaId");

                    b.Property<string>("Nombre");

                    b.Property<string>("Proyecto");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("DependenciaId");

                    b.ToTable("ProgramasSociales");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.Respuesta", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Complemento");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<bool>("Negativa");

                    b.Property<string>("Nombre");

                    b.Property<int>("Numero");

                    b.Property<string>("PreguntaId");

                    b.Property<string>("TipoComplemento");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("PreguntaId");

                    b.ToTable("Respuestas");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.RespuestaGrado", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("Grado");

                    b.Property<string>("PreguntaGradoId");

                    b.Property<string>("RespuestaId");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("PreguntaGradoId");

                    b.HasIndex("RespuestaId");

                    b.ToTable("RespuestaGrado");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.Sexo", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("Nombre");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Sexos");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.Solicitud", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AplicacionId");

                    b.Property<string>("BeneficiarioId");

                    b.Property<double>("Cantidad");

                    b.Property<double>("Costo");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DomicilioId");

                    b.Property<double>("Economico");

                    b.Property<string>("Estatus");

                    b.Property<string>("TrabajadorId");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("VertienteId");

                    b.HasKey("Id");

                    b.HasIndex("AplicacionId");

                    b.HasIndex("BeneficiarioId");

                    b.HasIndex("DomicilioId");

                    b.HasIndex("TrabajadorId");

                    b.HasIndex("VertienteId");

                    b.ToTable("Solicitudes");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.TipoAsentamiento", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("Nombre");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("TipoAsentamientos");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.Trabajador", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Codigo");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("Email");

                    b.Property<string>("Nombre");

                    b.Property<string>("Password");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("Trabajadores");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.TrabajadorDependencia", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DependenciaId");

                    b.Property<string>("TrabajadorId");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("DependenciaId");

                    b.HasIndex("TrabajadorId");

                    b.ToTable("TrabajadoresDependencias");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.TrabajadorRegion", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("TrabajadorId");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("ZonaId");

                    b.HasKey("Id");

                    b.HasIndex("TrabajadorId");

                    b.HasIndex("ZonaId");

                    b.ToTable("TrabajadorRegion");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.Unidad", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("Nombre");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Unidades");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.UsuarioDependencia", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DependenciaId");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UsuarioId");

                    b.HasKey("Id");

                    b.HasIndex("DependenciaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("UsuariosDependencias");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.UsuarioRegion", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("UsuarioId");

                    b.Property<string>("ZonaId");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.HasIndex("ZonaId");

                    b.ToTable("UsuarioRegion");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.Vertiente", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Ciclo");

                    b.Property<double>("Costo");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("Ejercicio");

                    b.Property<string>("Nombre");

                    b.Property<string>("ProgramaSocialId");

                    b.Property<string>("TipoEntrega");

                    b.Property<string>("UnidadId");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<int?>("Vigencia");

                    b.HasKey("Id");

                    b.HasIndex("ProgramaSocialId");

                    b.HasIndex("UnidadId");

                    b.ToTable("Vertientes");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.VertienteArchivo", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("TipoArchivo")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("VertienteId");

                    b.HasKey("Id");

                    b.HasIndex("VertienteId");

                    b.ToTable("VertientesArchivos");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.VertienteCarencia", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CarenciaId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<string>("VertienteId");

                    b.HasKey("Id");

                    b.HasIndex("CarenciaId");

                    b.HasIndex("VertienteId");

                    b.ToTable("VertienteCarencias");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.Zona", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Clave")
                        .IsRequired();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("DependenciaId");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("DependenciaId");

                    b.ToTable("Zonas");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.ZonaImpulso", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("MunicipioId");

                    b.Property<string>("Nombre");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("MunicipioId");

                    b.ToTable("ZonasImpulso");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DiagnosticoWeb.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DiagnosticoWeb.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DiagnosticoWeb.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DiagnosticoWeb.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.Ageb", b =>
                {
                    b.HasOne("DiagnosticoWeb.Models.Localidad", "Localidad")
                        .WithMany()
                        .HasForeignKey("LocalidadId");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.Aplicacion", b =>
                {
                    b.HasOne("DiagnosticoWeb.Models.Beneficiario", "Beneficiario")
                        .WithMany("Aplicaciones")
                        .HasForeignKey("BeneficiarioId");

                    b.HasOne("DiagnosticoWeb.Models.EncuestaVersion", "EncuestaVersion")
                        .WithMany()
                        .HasForeignKey("EncuestaVersionId");

                    b.HasOne("DiagnosticoWeb.Models.Trabajador", "Trabajador")
                        .WithMany()
                        .HasForeignKey("TrabajadorId");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.AplicacionPregunta", b =>
                {
                    b.HasOne("DiagnosticoWeb.Models.Aplicacion", "Aplicacion")
                        .WithMany("AplicacionPreguntas")
                        .HasForeignKey("AplicacionId");

                    b.HasOne("DiagnosticoWeb.Models.Pregunta", "Pregunta")
                        .WithMany()
                        .HasForeignKey("PreguntaId");

                    b.HasOne("DiagnosticoWeb.Models.Respuesta", "Respuesta")
                        .WithMany()
                        .HasForeignKey("RespuestaId");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.ApplicationUser", b =>
                {
                    b.HasOne("DiagnosticoWeb.Models.Dependencia", "Dependencia")
                        .WithMany()
                        .HasForeignKey("DependenciaId");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.Beneficiario", b =>
                {
                    b.HasOne("DiagnosticoWeb.Models.CausaDiscapacidad", "CausaDiscapacidad")
                        .WithMany()
                        .HasForeignKey("CausaDiscapacidadId");

                    b.HasOne("DiagnosticoWeb.Models.DiscapacidadGrado", "DiscapacidadGrado")
                        .WithMany()
                        .HasForeignKey("DiscapacidadGradoId");

                    b.HasOne("DiagnosticoWeb.Models.Discapacidad", "Discapacidad")
                        .WithMany()
                        .HasForeignKey("DiscapacidadId");

                    b.HasOne("DiagnosticoWeb.Models.EstadoCivil", "EstadoCivil")
                        .WithMany()
                        .HasForeignKey("EstadoCivilId");

                    b.HasOne("DiagnosticoWeb.Models.Estado", "Estado")
                        .WithMany()
                        .HasForeignKey("EstadoId");

                    b.HasOne("DiagnosticoWeb.Models.Estudio", "Estudio")
                        .WithMany()
                        .HasForeignKey("EstudioId");

                    b.HasOne("DiagnosticoWeb.Models.GradosEstudio", "GradoEstudio")
                        .WithMany()
                        .HasForeignKey("GradoEstudioId");

                    b.HasOne("DiagnosticoWeb.Models.Beneficiario", "Padre")
                        .WithMany("Hijos")
                        .HasForeignKey("PadreId");

                    b.HasOne("DiagnosticoWeb.Models.Parentesco", "Parentesco")
                        .WithMany()
                        .HasForeignKey("ParentescoId");

                    b.HasOne("DiagnosticoWeb.Models.Sexo", "Sexo")
                        .WithMany()
                        .HasForeignKey("SexoId");

                    b.HasOne("DiagnosticoWeb.Models.Trabajador", "Trabajador")
                        .WithMany()
                        .HasForeignKey("TrabajadorId");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.BeneficiarioHistorico", b =>
                {
                    b.HasOne("DiagnosticoWeb.Models.Beneficiario", "Beneficiario")
                        .WithMany()
                        .HasForeignKey("BeneficiarioId");

                    b.HasOne("DiagnosticoWeb.Models.CausaDiscapacidad", "CausaDiscapacidad")
                        .WithMany()
                        .HasForeignKey("CausaDiscapacidadId");

                    b.HasOne("DiagnosticoWeb.Models.DiscapacidadGrado", "DiscapacidadGrado")
                        .WithMany()
                        .HasForeignKey("DiscapacidadGradoId");

                    b.HasOne("DiagnosticoWeb.Models.Discapacidad", "Discapacidad")
                        .WithMany()
                        .HasForeignKey("DiscapacidadId");

                    b.HasOne("DiagnosticoWeb.Models.EstadoCivil", "EstadoCivil")
                        .WithMany()
                        .HasForeignKey("EstadoCivilId");

                    b.HasOne("DiagnosticoWeb.Models.Estado", "Estado")
                        .WithMany()
                        .HasForeignKey("EstadoId");

                    b.HasOne("DiagnosticoWeb.Models.Estudio", "Estudio")
                        .WithMany()
                        .HasForeignKey("EstudioId");

                    b.HasOne("DiagnosticoWeb.Models.GradosEstudio", "GradoEstudio")
                        .WithMany()
                        .HasForeignKey("GradoEstudioId");

                    b.HasOne("DiagnosticoWeb.Models.Sexo", "Sexo")
                        .WithMany()
                        .HasForeignKey("SexoId");

                    b.HasOne("DiagnosticoWeb.Models.Trabajador", "Trabajador")
                        .WithMany()
                        .HasForeignKey("TrabajadorId");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.Bitacora", b =>
                {
                    b.HasOne("DiagnosticoWeb.Models.ApplicationUser", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.DiscapacidadGrado", b =>
                {
                    b.HasOne("DiagnosticoWeb.Models.Grado", "Grade")
                        .WithMany()
                        .HasForeignKey("GradoId");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.Domicilio", b =>
                {
                    b.HasOne("DiagnosticoWeb.Models.Ageb", "Ageb")
                        .WithMany()
                        .HasForeignKey("AgebId");

                    b.HasOne("DiagnosticoWeb.Models.Beneficiario", "Beneficiario")
                        .WithMany("Domicilios")
                        .HasForeignKey("BeneficiarioId");

                    b.HasOne("DiagnosticoWeb.Models.Localidad", "Localidad")
                        .WithMany()
                        .HasForeignKey("LocalidadId");

                    b.HasOne("DiagnosticoWeb.Models.Municipio", "Municipio")
                        .WithMany()
                        .HasForeignKey("MunicipioId");

                    b.HasOne("DiagnosticoWeb.Models.Trabajador", "Trabajador")
                        .WithMany()
                        .HasForeignKey("TrabajadorId");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.EncuestaVersion", b =>
                {
                    b.HasOne("DiagnosticoWeb.Models.Encuesta", "Encuesta")
                        .WithMany("EncuestaVersiones")
                        .HasForeignKey("EncuestaId");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.Importacion", b =>
                {
                    b.HasOne("DiagnosticoWeb.Models.ApplicationUser", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.Localidad", b =>
                {
                    b.HasOne("DiagnosticoWeb.Models.Municipio", "Municipio")
                        .WithMany("Localidades")
                        .HasForeignKey("MunicipioId");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.Manzana", b =>
                {
                    b.HasOne("DiagnosticoWeb.Models.Localidad", "Localidad")
                        .WithMany()
                        .HasForeignKey("LocalidadId");

                    b.HasOne("DiagnosticoWeb.Models.Localidad", "Municipio")
                        .WithMany()
                        .HasForeignKey("MunicipioId");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.Municipio", b =>
                {
                    b.HasOne("DiagnosticoWeb.Models.Estado", "Estado")
                        .WithMany()
                        .HasForeignKey("EstadoId");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.MunicipioZona", b =>
                {
                    b.HasOne("DiagnosticoWeb.Models.Municipio", "Municipio")
                        .WithMany("MunicipioZonas")
                        .HasForeignKey("MunicipioId");

                    b.HasOne("DiagnosticoWeb.Models.Zona", "Zona")
                        .WithMany("MunicipioZonas")
                        .HasForeignKey("ZonaId");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.Pregunta", b =>
                {
                    b.HasOne("DiagnosticoWeb.Models.Carencia", "Carencia")
                        .WithMany()
                        .HasForeignKey("CarenciaId");

                    b.HasOne("DiagnosticoWeb.Models.EncuestaVersion", "EncuestaVersion")
                        .WithMany("Preguntas")
                        .HasForeignKey("EncuestaVersionId");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.PreguntaGrado", b =>
                {
                    b.HasOne("DiagnosticoWeb.Models.Pregunta", "Pregunta")
                        .WithMany("PreguntaGrados")
                        .HasForeignKey("PreguntaId");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.ProgramaSocial", b =>
                {
                    b.HasOne("DiagnosticoWeb.Models.Dependencia", "Dependencia")
                        .WithMany()
                        .HasForeignKey("DependenciaId");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.Respuesta", b =>
                {
                    b.HasOne("DiagnosticoWeb.Models.Pregunta", "Pregunta")
                        .WithMany("Respuestas")
                        .HasForeignKey("PreguntaId");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.RespuestaGrado", b =>
                {
                    b.HasOne("DiagnosticoWeb.Models.PreguntaGrado", "PreguntaGrado")
                        .WithMany()
                        .HasForeignKey("PreguntaGradoId");

                    b.HasOne("DiagnosticoWeb.Models.Respuesta", "Respuesta")
                        .WithMany("RespuestaGrados")
                        .HasForeignKey("RespuestaId");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.Solicitud", b =>
                {
                    b.HasOne("DiagnosticoWeb.Models.Aplicacion", "Aplicacion")
                        .WithMany()
                        .HasForeignKey("AplicacionId");

                    b.HasOne("DiagnosticoWeb.Models.Beneficiario", "Beneficiario")
                        .WithMany("Solicitudes")
                        .HasForeignKey("BeneficiarioId");

                    b.HasOne("DiagnosticoWeb.Models.Domicilio", "Domicilio")
                        .WithMany()
                        .HasForeignKey("DomicilioId");

                    b.HasOne("DiagnosticoWeb.Models.Trabajador", "Trabajador")
                        .WithMany()
                        .HasForeignKey("TrabajadorId");

                    b.HasOne("DiagnosticoWeb.Models.Vertiente", "Vertiente")
                        .WithMany("Solicitudes")
                        .HasForeignKey("VertienteId");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.TrabajadorDependencia", b =>
                {
                    b.HasOne("DiagnosticoWeb.Models.Dependencia", "Dependencia")
                        .WithMany("TrabajadorDependencias")
                        .HasForeignKey("DependenciaId");

                    b.HasOne("DiagnosticoWeb.Models.Trabajador", "Trabajador")
                        .WithMany("TrabajadorDependencias")
                        .HasForeignKey("TrabajadorId");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.TrabajadorRegion", b =>
                {
                    b.HasOne("DiagnosticoWeb.Models.Trabajador", "Trabajador")
                        .WithMany()
                        .HasForeignKey("TrabajadorId");

                    b.HasOne("DiagnosticoWeb.Models.Zona", "Zona")
                        .WithMany()
                        .HasForeignKey("ZonaId");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.UsuarioDependencia", b =>
                {
                    b.HasOne("DiagnosticoWeb.Models.Dependencia", "Dependencia")
                        .WithMany()
                        .HasForeignKey("DependenciaId");

                    b.HasOne("DiagnosticoWeb.Models.ApplicationUser", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.UsuarioRegion", b =>
                {
                    b.HasOne("DiagnosticoWeb.Models.ApplicationUser", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId");

                    b.HasOne("DiagnosticoWeb.Models.Zona", "Zona")
                        .WithMany()
                        .HasForeignKey("ZonaId");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.Vertiente", b =>
                {
                    b.HasOne("DiagnosticoWeb.Models.ProgramaSocial", "ProgramaSocial")
                        .WithMany("Vertientes")
                        .HasForeignKey("ProgramaSocialId");

                    b.HasOne("DiagnosticoWeb.Models.Unidad", "Unidad")
                        .WithMany()
                        .HasForeignKey("UnidadId");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.VertienteArchivo", b =>
                {
                    b.HasOne("DiagnosticoWeb.Models.Vertiente", "Vertiente")
                        .WithMany("VertienteArchivos")
                        .HasForeignKey("VertienteId");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.VertienteCarencia", b =>
                {
                    b.HasOne("DiagnosticoWeb.Models.Carencia", "Carencia")
                        .WithMany("VertienteCarencias")
                        .HasForeignKey("CarenciaId");

                    b.HasOne("DiagnosticoWeb.Models.Vertiente", "Vertiente")
                        .WithMany("VertienteCarencias")
                        .HasForeignKey("VertienteId");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.Zona", b =>
                {
                    b.HasOne("DiagnosticoWeb.Models.Dependencia", "Dependencia")
                        .WithMany("Zonas")
                        .HasForeignKey("DependenciaId");
                });

            modelBuilder.Entity("DiagnosticoWeb.Models.ZonaImpulso", b =>
                {
                    b.HasOne("DiagnosticoWeb.Models.Municipio", "Municipio")
                        .WithMany()
                        .HasForeignKey("MunicipioId");
                });
#pragma warning restore 612, 618
        }
    }
}
